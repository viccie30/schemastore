{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/clang-tidy.json",
  "additionalProperties": true,
  "definitions": {
    "fileExtensions": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[ \\t\\n\\v\\f\\r]*[a-zA-Z0-9]*[ \\t\\n\\v\\f\\r]$"
      }
    },
    "options": {
      "type": "string",
      "enum": [
        "AggressiveDependentMemberLookup",
        "AllowPartialMove",
        "CheckFirstDeclaration",
        "DeduplicateFindings",
        "EnableProto",
        "IgnoreHeaders",
        "IgnoreMacros",
        "IgnoreNonDeducedTemplateTypes",
        "IgnoreSmartPointerDereference",
        "IgnoreTypeAliases",
        "IgnoreUnnamedParams",
        "IncludeStyle",
        "Strict",
        "StrictMode",
        "UseAssignment",
        "abseil-cleanup-ctad.IncludeStyle",
        "abseil-string-find-startswith.AbseilStringsMatchHeader",
        "abseil-string-find-startswith.IncludeStyle",
        "abseil-string-find-startswith.StringLikeClasses",
        "abseil-string-find-str-contains.AbseilStringsMatchHeader",
        "abseil-string-find-str-contains.IncludeStyle",
        "abseil-string-find-str-contains.StringLikeClasses",
        "altera-single-work-item-barrier.AOCVersion",
        "altera-struct-pack-align.MaxConfiguredAlignment",
        "altera-unroll-loops.MaxLoopIterations",
        "android-comparison-in-temp-failure-retry.RetryMacros",
        "bugprone-argument-comment.CommentBoolLiterals",
        "bugprone-argument-comment.CommentCharacterLiterals",
        "bugprone-argument-comment.CommentFloatLiterals",
        "bugprone-argument-comment.CommentIntegerLiterals",
        "bugprone-argument-comment.CommentNullPtrs",
        "bugprone-argument-comment.CommentStringLiterals",
        "bugprone-argument-comment.CommentUserDefinedLiterals",
        "bugprone-argument-comment.IgnoreSingleArgument",
        "bugprone-argument-comment.StrictMode",
        "bugprone-assert-side-effect.AssertMacros",
        "bugprone-assert-side-effect.CheckFunctionCalls",
        "bugprone-assert-side-effect.IgnoredFunctions",
        "bugprone-dangling-handle.HandleClasses",
        "bugprone-dynamic-static-initializers.HeaderFileExtensions",
        "bugprone-easily-swappable-parameters.IgnoredParameterNames",
        "bugprone-easily-swappable-parameters.IgnoredParameterTypeSuffixes",
        "bugprone-easily-swappable-parameters.MinimumLength",
        "bugprone-easily-swappable-parameters.ModelImplicitConversions",
        "bugprone-easily-swappable-parameters.NamePrefixSuffixSilenceDissimilarityTreshold",
        "bugprone-easily-swappable-parameters.QualifiersMix",
        "bugprone-easily-swappable-parameters.SuppressParametersUsedTogether",
        "bugprone-empty-catch.AllowEmptyCatchForExceptions",
        "bugprone-empty-catch.IgnoreCatchWithKeywords",
        "bugprone-exception-escape.FunctionsThatShouldNotThrow",
        "bugprone-exception-escape.IgnoredExceptions",
        "bugprone-implicit-widening-of-multiplication-result.IncludeStyle",
        "bugprone-implicit-widening-of-multiplication-result.UseCXXHeadersInCppSources",
        "bugprone-implicit-widening-of-multiplication-result.UseCXXStaticCastsInCppSources",
        "bugprone-lambda-function-name.IgnoreMacros",
        "bugprone-misplaced-widening-cast.CheckImplicitCasts",
        "bugprone-narrowing-conversions.IgnoreConversionFromTypes",
        "bugprone-narrowing-conversions.PedanticMode",
        "bugprone-narrowing-conversions.WarnOnEquivalentBitWidth",
        "bugprone-narrowing-conversions.WarnOnFloatingPointNarrowingConversion",
        "bugprone-narrowing-conversions.WarnOnIntegerNarrowingConversion",
        "bugprone-narrowing-conversions.WarnOnIntegerToFloatingPointNarrowingConversion",
        "bugprone-narrowing-conversions.WarnWithinTemplateInstantiation",
        "bugprone-non-zero-enum-to-bool-conversion.EnumIgnoreList",
        "bugprone-not-null-terminated-result.WantToUseSafeFunctions",
        "bugprone-optional-value-conversion.OptionalTypes",
        "bugprone-optional-value-conversion.ValueMethods",
        "bugprone-reserved-identifier.AggressiveDependentMemberLookup",
        "bugprone-reserved-identifier.AllowedIdentifiers",
        "bugprone-reserved-identifier.Invert",
        "bugprone-signal-handler.AsyncSafeFunctionSet",
        "bugprone-signed-char-misuse.CharTypdefsToIgnore",
        "bugprone-signed-char-misuse.DiagnoseSignedUnsignedCharComparisons",
        "bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant",
        "bugprone-sizeof-expression.WarnOnSizeOfConstant",
        "bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression",
        "bugprone-sizeof-expression.WarnOnSizeOfPointerToAggregate",
        "bugprone-sizeof-expression.WarnOnSizeOfThis",
        "bugprone-string-constructor.LargeLengthThreshold",
        "bugprone-string-constructor.StringNames",
        "bugprone-string-constructor.WarnOnLargeLength",
        "bugprone-stringview-nullptr.IncludeStyle",
        "bugprone-suspicious-enum-usage.StrictMode",
        "bugprone-suspicious-include.HeaderFileExtensions",
        "bugprone-suspicious-include.ImplementationFileExtensions",
        "bugprone-suspicious-missing-comma.MaxConcatenatedTokens",
        "bugprone-suspicious-missing-comma.RatioThreshold",
        "bugprone-suspicious-missing-comma.SizeThreshold",
        "bugprone-suspicious-string-compare.StringCompareLikeFunctions",
        "bugprone-suspicious-string-compare.WarnOnImplicitComparison",
        "bugprone-suspicious-string-compare.WarnOnLogicalNotComparison",
        "bugprone-too-small-loop-variable.MagnitudeBitsUpperLimit",
        "bugprone-unchecked-optional-access.IgnoreSmartPointerDereference",
        "bugprone-unhandled-self-assignment.WarnOnlyIfThisHasSuspiciousField",
        "bugprone-unsafe-functions.ReportMoreUnsafeFunctions",
        "bugprone-unused-local-non-trivial-variable.ExcludeTypes",
        "bugprone-unused-local-non-trivial-variable.IncludeTypes",
        "bugprone-unused-return-value.AllowCastToVoid",
        "bugprone-unused-return-value.CheckedFunctions",
        "bugprone-unused-return-value.CheckedReturnTypes",
        "cert-dcl16-c.IgnoreMacros",
        "cert-dcl16-c.NewSuffixes",
        "cert-dcl37-c.AggressiveDependentMemberLookup",
        "cert-dcl37-c.AllowedIdentifiers",
        "cert-dcl37-c.Invert",
        "cert-dcl51-cpp.AggressiveDependentMemberLookup",
        "cert-dcl51-cpp.AllowedIdentifiers",
        "cert-dcl51-cpp.Invert",
        "cert-dcl59-cpp.HeaderFileExtensions",
        "cert-err09-cpp.CheckThrowTemporaries",
        "cert-err09-cpp.MaxSize",
        "cert-err09-cpp.WarnOnLargeObject",
        "cert-err33-c.AllowCastToVoid",
        "cert-err33-c.CheckedFunctions",
        "cert-err33-c.CheckedReturnTypes",
        "cert-err61-cpp.CheckThrowTemporaries",
        "cert-err61-cpp.MaxSize",
        "cert-err61-cpp.WarnOnLargeObject",
        "cert-msc24-c.ReportMoreUnsafeFunctions",
        "cert-msc32-c.DisallowedSeedTypes",
        "cert-msc33-c.ReportMoreUnsafeFunctions",
        "cert-msc51-cpp.DisallowedSeedTypes",
        "cert-msc54-cpp.AsyncSafeFunctionSet",
        "cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField",
        "cert-oop57-cpp.MemCmpNames",
        "cert-oop57-cpp.MemCpyNames",
        "cert-oop57-cpp.MemSetNames",
        "cert-sig30-c.AsyncSafeFunctionSet",
        "cert-str34-c.CharTypdefsToIgnore",
        "cert-str34-c.DiagnoseSignedUnsignedCharComparisons",
        "concurrency-mt-unsafe.FunctionSet",
        "cppcoreguidelines-avoid-do-while.IgnoreMacros",
        "cppcoreguidelines-avoid-magic-numbers.IgnoreAllFloatingPointValues",
        "cppcoreguidelines-avoid-magic-numbers.IgnoreBitFieldsWidths",
        "cppcoreguidelines-avoid-magic-numbers.IgnorePowersOf2IntegerValues",
        "cppcoreguidelines-avoid-magic-numbers.IgnoreTypeAliases",
        "cppcoreguidelines-avoid-magic-numbers.IgnoreUserDefinedLiterals",
        "cppcoreguidelines-avoid-magic-numbers.IgnoredFloatingPointValues",
        "cppcoreguidelines-avoid-magic-numbers.IgnoredIntegerValues",
        "cppcoreguidelines-explicit-virtual-functions.AllowOverrideAndFinal",
        "cppcoreguidelines-explicit-virtual-functions.FinalSpelling",
        "cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors",
        "cppcoreguidelines-explicit-virtual-functions.IgnoreTemplateInstantiations",
        "cppcoreguidelines-explicit-virtual-functions.OverrideSpelling",
        "cppcoreguidelines-init-variables.IncludeStyle",
        "cppcoreguidelines-init-variables.MathHeader",
        "cppcoreguidelines-macro-usage.AllowedRegexp",
        "cppcoreguidelines-macro-usage.CheckCapsOnly",
        "cppcoreguidelines-macro-usage.IgnoreCommandLineMacros",
        "cppcoreguidelines-narrowing-conversions.IgnoreConversionFromTypes",
        "cppcoreguidelines-narrowing-conversions.PedanticMode",
        "cppcoreguidelines-narrowing-conversions.WarnOnEquivalentBitWidth",
        "cppcoreguidelines-narrowing-conversions.WarnOnFloatingPointNarrowingConversion",
        "cppcoreguidelines-narrowing-conversions.WarnOnIntegerNarrowingConversion",
        "cppcoreguidelines-narrowing-conversions.WarnOnIntegerToFloatingPointNarrowingConversion",
        "cppcoreguidelines-narrowing-conversions.WarnWithinTemplateInstantiation",
        "cppcoreguidelines-no-malloc.Allocations",
        "cppcoreguidelines-no-malloc.Deallocations",
        "cppcoreguidelines-no-malloc.Reallocations",
        "cppcoreguidelines-no-suspend-with-lock.LockGuards",
        "cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic",
        "cppcoreguidelines-non-private-member-variables-in-classes.IgnorePublicMemberVariables",
        "cppcoreguidelines-owning-memory.LegacyResourceConsumers",
        "cppcoreguidelines-owning-memory.LegacyResourceProducers",
        "cppcoreguidelines-prefer-member-initializer.UseAssignment",
        "cppcoreguidelines-pro-bounds-constant-array-index.GslHeader",
        "cppcoreguidelines-pro-bounds-constant-array-index.IncludeStyle",
        "cppcoreguidelines-pro-type-const-cast.StrictMode",
        "cppcoreguidelines-pro-type-member-init.IgnoreArrays",
        "cppcoreguidelines-pro-type-member-init.UseAssignment",
        "cppcoreguidelines-pro-type-static-cast-downcast.StrictMode",
        "cppcoreguidelines-rvalue-reference-param-not-moved.AllowPartialMove",
        "cppcoreguidelines-rvalue-reference-param-not-moved.IgnoreNonDeducedTemplateTypes",
        "cppcoreguidelines-rvalue-reference-param-not-moved.IgnoreUnnamedParams",
        "cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions",
        "cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted",
        "cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor",
        "cppcoreguidelines-use-default-member-init.IgnoreMacros",
        "cppcoreguidelines-use-default-member-init.UseAssignment",
        "fuchsia-header-anon-namespaces.HeaderFileExtensions",
        "google-build-namespaces.HeaderFileExtensions",
        "google-global-names-in-headers.HeaderFileExtensions",
        "google-readability-braces-around-statements.ShortStatementLines",
        "google-readability-function-size.BranchThreshold",
        "google-readability-function-size.LineThreshold",
        "google-readability-function-size.NestingThreshold",
        "google-readability-function-size.ParameterThreshold",
        "google-readability-function-size.StatementThreshold",
        "google-readability-function-size.VariableThreshold",
        "google-readability-namespace-comments.ShortNamespaceLines",
        "google-readability-namespace-comments.SpacesBeforeComments",
        "google-runtime-int.SignedTypePrefix",
        "google-runtime-int.TypeSuffix",
        "google-runtime-int.UnsignedTypePrefix",
        "hicpp-braces-around-statements.ShortStatementLines",
        "hicpp-deprecated-headers.CheckHeaderFile",
        "hicpp-function-size.BranchThreshold",
        "hicpp-function-size.LineThreshold",
        "hicpp-function-size.NestingThreshold",
        "hicpp-function-size.ParameterThreshold",
        "hicpp-function-size.StatementThreshold",
        "hicpp-function-size.VariableThreshold",
        "hicpp-ignored-remove-result.AllowCastToVoid",
        "hicpp-member-init.IgnoreArrays",
        "hicpp-member-init.UseAssignment",
        "hicpp-move-const-arg.CheckMoveToConstRef",
        "hicpp-move-const-arg.CheckTriviallyCopyableMove",
        "hicpp-multiway-paths-covered.WarnOnMissingElse",
        "hicpp-no-malloc.Allocations",
        "hicpp-no-malloc.Deallocations",
        "hicpp-no-malloc.Reallocations",
        "hicpp-signed-bitwise.IgnorePositiveIntegerLiterals",
        "hicpp-special-member-functions.AllowMissingMoveFunctions",
        "hicpp-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted",
        "hicpp-special-member-functions.AllowSoleDefaultDtor",
        "hicpp-uppercase-literal-suffix.IgnoreMacros",
        "hicpp-uppercase-literal-suffix.NewSuffixes",
        "hicpp-use-auto.MinTypeNameLength",
        "hicpp-use-auto.RemoveStars",
        "hicpp-use-emplace.ContainersWithPush",
        "hicpp-use-emplace.ContainersWithPushBack",
        "hicpp-use-emplace.ContainersWithPushFront",
        "hicpp-use-emplace.EmplacyFunctions",
        "hicpp-use-emplace.IgnoreImplicitConstructors",
        "hicpp-use-emplace.SmartPointers",
        "hicpp-use-emplace.TupleMakeFunctions",
        "hicpp-use-emplace.TupleTypes",
        "hicpp-use-equals-default.IgnoreMacros",
        "hicpp-use-equals-delete.IgnoreMacros",
        "hicpp-use-noexcept.ReplacementString",
        "hicpp-use-noexcept.UseNoexceptFalse",
        "hicpp-use-nullptr.IgnoredTypes",
        "hicpp-use-nullptr.NullMacros",
        "hicpp-use-override.AllowOverrideAndFinal",
        "hicpp-use-override.FinalSpelling",
        "hicpp-use-override.IgnoreDestructors",
        "hicpp-use-override.IgnoreTemplateInstantiations",
        "hicpp-use-override.OverrideSpelling",
        "llvm-else-after-return.WarnOnConditionVariables",
        "llvm-else-after-return.WarnOnUnfixable",
        "llvm-header-guard.HeaderFileExtensions",
        "llvm-namespace-comment.ShortNamespaceLines",
        "llvm-namespace-comment.SpacesBeforeComments",
        "llvm-qualified-auto.AddConstToQualified",
        "llvmlibc-restrict-system-libc-headers.Includes",
        "misc-const-correctness.AnalyzeReferences",
        "misc-const-correctness.AnalyzeValues",
        "misc-const-correctness.TransformPointersAsValues",
        "misc-const-correctness.TransformReferences",
        "misc-const-correctness.TransformValues",
        "misc-const-correctness.WarnPointersAsValues",
        "misc-coroutine-hostile-raii.AllowedAwaitablesList",
        "misc-coroutine-hostile-raii.RAIITypesList",
        "misc-definitions-in-headers.HeaderFileExtensions",
        "misc-definitions-in-headers.UseHeaderFileExtension",
        "misc-header-include-cycle.IgnoredFilesList",
        "misc-include-cleaner.DeduplicateFindings",
        "misc-include-cleaner.IgnoreHeaders",
        "misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic",
        "misc-non-private-member-variables-in-classes.IgnorePublicMemberVariables",
        "misc-throw-by-value-catch-by-reference.CheckThrowTemporaries",
        "misc-throw-by-value-catch-by-reference.MaxSize",
        "misc-throw-by-value-catch-by-reference.WarnOnLargeObject",
        "misc-uniqueptr-reset-release.IncludeStyle",
        "misc-unused-parameters.IgnoreVirtual",
        "misc-unused-parameters.StrictMode",
        "misc-unused-using-decls.HeaderFileExtensions",
        "misc-use-anonymous-namespace.HeaderFileExtensions",
        "modernize-avoid-bind.PermissiveParameterList",
        "modernize-deprecated-headers.CheckHeaderFile",
        "modernize-loop-convert.IncludeStyle",
        "modernize-loop-convert.MakeReverseRangeFunction",
        "modernize-loop-convert.MakeReverseRangeHeader",
        "modernize-loop-convert.MaxCopySize",
        "modernize-loop-convert.MinConfidence",
        "modernize-loop-convert.NamingStyle",
        "modernize-loop-convert.UseCxx20ReverseRanges",
        "modernize-make-shared.IgnoreDefaultInitialization",
        "modernize-make-shared.IgnoreMacros",
        "modernize-make-shared.IncludeStyle",
        "modernize-make-shared.MakeSmartPtrFunction",
        "modernize-make-shared.MakeSmartPtrFunctionHeader",
        "modernize-make-unique.IgnoreDefaultInitialization",
        "modernize-make-unique.IgnoreMacros",
        "modernize-make-unique.IncludeStyle",
        "modernize-make-unique.MakeSmartPtrFunction",
        "modernize-make-unique.MakeSmartPtrFunctionHeader",
        "modernize-pass-by-value.IncludeStyle",
        "modernize-pass-by-value.ValuesOnly",
        "modernize-raw-string-literal.DelimiterStem",
        "modernize-raw-string-literal.ReplaceShorterLiterals",
        "modernize-replace-auto-ptr.IncludeStyle",
        "modernize-replace-disallow-copy-and-assign-macro.MacroName",
        "modernize-replace-random-shuffle.IncludeStyle",
        "modernize-type-traits.IgnoreMacros",
        "modernize-use-auto.MinTypeNameLength",
        "modernize-use-auto.RemoveStars",
        "modernize-use-bool-literals.IgnoreMacros",
        "modernize-use-default-member-init.IgnoreMacros",
        "modernize-use-default-member-init.UseAssignment",
        "modernize-use-emplace.ContainersWithPush",
        "modernize-use-emplace.ContainersWithPushBack",
        "modernize-use-emplace.ContainersWithPushFront",
        "modernize-use-emplace.EmplacyFunctions",
        "modernize-use-emplace.IgnoreImplicitConstructors",
        "modernize-use-emplace.SmartPointers",
        "modernize-use-emplace.TupleMakeFunctions",
        "modernize-use-emplace.TupleTypes",
        "modernize-use-equals-default.IgnoreMacros",
        "modernize-use-equals-delete.IgnoreMacros",
        "modernize-use-nodiscard.ReplacementString",
        "modernize-use-noexcept.ReplacementString",
        "modernize-use-noexcept.UseNoexceptFalse",
        "modernize-use-nullptr.IgnoredTypes",
        "modernize-use-nullptr.NullMacros",
        "modernize-use-override.AllowOverrideAndFinal",
        "modernize-use-override.FinalSpelling",
        "modernize-use-override.IgnoreDestructors",
        "modernize-use-override.IgnoreTemplateInstantiations",
        "modernize-use-override.OverrideSpelling",
        "modernize-use-std-numbers.DiffThreshold",
        "modernize-use-std-numbers.IncludeStyle",
        "modernize-use-std-print.FprintfLikeFunctions",
        "modernize-use-std-print.IncludeStyle",
        "modernize-use-std-print.PrintHeader",
        "modernize-use-std-print.PrintfLikeFunctions",
        "modernize-use-std-print.ReplacementPrintFunction",
        "modernize-use-std-print.ReplacementPrintlnFunction",
        "modernize-use-std-print.StrictMode",
        "modernize-use-transparent-functors.SafeMode",
        "modernize-use-using.IgnoreExternC",
        "modernize-use-using.IgnoreMacros",
        "objc-forbidden-subclassing.ClassNames",
        "openmp-exception-escape.IgnoredExceptions",
        "performance-enum-size.EnumIgnoreList",
        "performance-faster-string-find.StringLikeClasses",
        "performance-for-range-copy.AllowedTypes",
        "performance-for-range-copy.WarnOnAllAutoCopies",
        "performance-inefficient-string-concatenation.StrictMode",
        "performance-inefficient-vector-operation.EnableProto",
        "performance-inefficient-vector-operation.VectorLikeClasses",
        "performance-move-const-arg.CheckMoveToConstRef",
        "performance-move-const-arg.CheckTriviallyCopyableMove",
        "performance-no-automatic-move.AllowedTypes",
        "performance-type-promotion-in-math-fn.IncludeStyle",
        "performance-unnecessary-copy-initialization.AllowedTypes",
        "performance-unnecessary-copy-initialization.ExcludedContainerTypes",
        "performance-unnecessary-value-param.AllowedTypes",
        "performance-unnecessary-value-param.IncludeStyle",
        "portability-restrict-system-includes.Includes",
        "portability-simd-intrinsics.Std",
        "portability-simd-intrinsics.Suggest",
        "readability-avoid-const-params-in-decls.IgnoreMacros",
        "readability-avoid-return-with-void-value.IgnoreMacros",
        "readability-avoid-return-with-void-value.StrictMode",
        "readability-braces-around-statements.ShortStatementLines",
        "readability-const-return-type.IgnoreMacros",
        "readability-container-data-pointer.IgnoredContainers",
        "readability-container-size-empty.ExcludedComparisonTypes",
        "readability-else-after-return.WarnOnConditionVariables",
        "readability-else-after-return.WarnOnUnfixable",
        "readability-function-cognitive-complexity.DescribeBasicIncrements",
        "readability-function-cognitive-complexity.IgnoreMacros",
        "readability-function-cognitive-complexity.Threshold",
        "readability-function-size.BranchThreshold",
        "readability-function-size.LineThreshold",
        "readability-function-size.NestingThreshold",
        "readability-function-size.ParameterThreshold",
        "readability-function-size.StatementThreshold",
        "readability-function-size.VariableThreshold",
        "readability-identifier-length.IgnoredExceptionVariableNames",
        "readability-identifier-length.IgnoredLoopCounterNames",
        "readability-identifier-length.IgnoredParameterNames",
        "readability-identifier-length.IgnoredVariableNames",
        "readability-identifier-length.MinimumExceptionNameLength",
        "readability-identifier-length.MinimumLoopCounterNameLength",
        "readability-identifier-length.MinimumParameterNameLength",
        "readability-identifier-length.MinimumVariableNameLength",
        "readability-identifier-naming.AbstractClassCase",
        "readability-identifier-naming.AbstractClassHungarianPrefix",
        "readability-identifier-naming.AbstractClassIgnoredRegexp",
        "readability-identifier-naming.AbstractClassPrefix",
        "readability-identifier-naming.AbstractClassSuffix",
        "readability-identifier-naming.AggressiveDependentMemberLookup",
        "readability-identifier-naming.CheckAnonFieldInParent",
        "readability-identifier-naming.ClassCase",
        "readability-identifier-naming.ClassConstantCase",
        "readability-identifier-naming.ClassConstantHungarianPrefix",
        "readability-identifier-naming.ClassConstantIgnoredRegexp",
        "readability-identifier-naming.ClassConstantPrefix",
        "readability-identifier-naming.ClassConstantSuffix",
        "readability-identifier-naming.ClassHungarianPrefix",
        "readability-identifier-naming.ClassIgnoredRegexp",
        "readability-identifier-naming.ClassMemberCase",
        "readability-identifier-naming.ClassMemberHungarianPrefix",
        "readability-identifier-naming.ClassMemberIgnoredRegexp",
        "readability-identifier-naming.ClassMemberPrefix",
        "readability-identifier-naming.ClassMemberSuffix",
        "readability-identifier-naming.ClassMethodCase",
        "readability-identifier-naming.ClassMethodHungarianPrefix",
        "readability-identifier-naming.ClassMethodIgnoredRegexp",
        "readability-identifier-naming.ClassMethodPrefix",
        "readability-identifier-naming.ClassMethodSuffix",
        "readability-identifier-naming.ClassPrefix",
        "readability-identifier-naming.ClassSuffix",
        "readability-identifier-naming.ConceptCase",
        "readability-identifier-naming.ConceptHungarianPrefix",
        "readability-identifier-naming.ConceptIgnoredRegexp",
        "readability-identifier-naming.ConceptPrefix",
        "readability-identifier-naming.ConceptSuffix",
        "readability-identifier-naming.ConstantCase",
        "readability-identifier-naming.ConstantHungarianPrefix",
        "readability-identifier-naming.ConstantIgnoredRegexp",
        "readability-identifier-naming.ConstantMemberCase",
        "readability-identifier-naming.ConstantMemberHungarianPrefix",
        "readability-identifier-naming.ConstantMemberIgnoredRegexp",
        "readability-identifier-naming.ConstantMemberPrefix",
        "readability-identifier-naming.ConstantMemberSuffix",
        "readability-identifier-naming.ConstantParameterCase",
        "readability-identifier-naming.ConstantParameterHungarianPrefix",
        "readability-identifier-naming.ConstantParameterIgnoredRegexp",
        "readability-identifier-naming.ConstantParameterPrefix",
        "readability-identifier-naming.ConstantParameterSuffix",
        "readability-identifier-naming.ConstantPointerParameterCase",
        "readability-identifier-naming.ConstantPointerParameterHungarianPrefix",
        "readability-identifier-naming.ConstantPointerParameterIgnoredRegexp",
        "readability-identifier-naming.ConstantPointerParameterPrefix",
        "readability-identifier-naming.ConstantPointerParameterSuffix",
        "readability-identifier-naming.ConstantPrefix",
        "readability-identifier-naming.ConstantSuffix",
        "readability-identifier-naming.ConstexprFunctionCase",
        "readability-identifier-naming.ConstexprFunctionHungarianPrefix",
        "readability-identifier-naming.ConstexprFunctionIgnoredRegexp",
        "readability-identifier-naming.ConstexprFunctionPrefix",
        "readability-identifier-naming.ConstexprFunctionSuffix",
        "readability-identifier-naming.ConstexprMethodCase",
        "readability-identifier-naming.ConstexprMethodHungarianPrefix",
        "readability-identifier-naming.ConstexprMethodIgnoredRegexp",
        "readability-identifier-naming.ConstexprMethodPrefix",
        "readability-identifier-naming.ConstexprMethodSuffix",
        "readability-identifier-naming.ConstexprVariableCase",
        "readability-identifier-naming.ConstexprVariableHungarianPrefix",
        "readability-identifier-naming.ConstexprVariableIgnoredRegexp",
        "readability-identifier-naming.ConstexprVariablePrefix",
        "readability-identifier-naming.ConstexprVariableSuffix",
        "readability-identifier-naming.EnumCase",
        "readability-identifier-naming.EnumConstantCase",
        "readability-identifier-naming.EnumConstantHungarianPrefix",
        "readability-identifier-naming.EnumConstantIgnoredRegexp",
        "readability-identifier-naming.EnumConstantPrefix",
        "readability-identifier-naming.EnumConstantSuffix",
        "readability-identifier-naming.EnumHungarianPrefix",
        "readability-identifier-naming.EnumIgnoredRegexp",
        "readability-identifier-naming.EnumPrefix",
        "readability-identifier-naming.EnumSuffix",
        "readability-identifier-naming.FunctionCase",
        "readability-identifier-naming.FunctionHungarianPrefix",
        "readability-identifier-naming.FunctionIgnoredRegexp",
        "readability-identifier-naming.FunctionPrefix",
        "readability-identifier-naming.FunctionSuffix",
        "readability-identifier-naming.GetConfigPerFile",
        "readability-identifier-naming.GlobalConstantCase",
        "readability-identifier-naming.GlobalConstantHungarianPrefix",
        "readability-identifier-naming.GlobalConstantIgnoredRegexp",
        "readability-identifier-naming.GlobalConstantPointerCase",
        "readability-identifier-naming.GlobalConstantPointerHungarianPrefix",
        "readability-identifier-naming.GlobalConstantPointerIgnoredRegexp",
        "readability-identifier-naming.GlobalConstantPointerPrefix",
        "readability-identifier-naming.GlobalConstantPointerSuffix",
        "readability-identifier-naming.GlobalConstantPrefix",
        "readability-identifier-naming.GlobalConstantSuffix",
        "readability-identifier-naming.GlobalFunctionCase",
        "readability-identifier-naming.GlobalFunctionHungarianPrefix",
        "readability-identifier-naming.GlobalFunctionIgnoredRegexp",
        "readability-identifier-naming.GlobalFunctionPrefix",
        "readability-identifier-naming.GlobalFunctionSuffix",
        "readability-identifier-naming.GlobalPointerCase",
        "readability-identifier-naming.GlobalPointerHungarianPrefix",
        "readability-identifier-naming.GlobalPointerIgnoredRegexp",
        "readability-identifier-naming.GlobalPointerPrefix",
        "readability-identifier-naming.GlobalPointerSuffix",
        "readability-identifier-naming.GlobalVariableCase",
        "readability-identifier-naming.GlobalVariableHungarianPrefix",
        "readability-identifier-naming.GlobalVariableIgnoredRegexp",
        "readability-identifier-naming.GlobalVariablePrefix",
        "readability-identifier-naming.GlobalVariableSuffix",
        "readability-identifier-naming.HungarianNotation.CString.CharArray",
        "readability-identifier-naming.HungarianNotation.CString.CharPointer",
        "readability-identifier-naming.HungarianNotation.CString.WideCharArray",
        "readability-identifier-naming.HungarianNotation.CString.WideCharPointer",
        "readability-identifier-naming.HungarianNotation.DerivedType.Array",
        "readability-identifier-naming.HungarianNotation.DerivedType.FunctionPointer",
        "readability-identifier-naming.HungarianNotation.DerivedType.Pointer",
        "readability-identifier-naming.HungarianNotation.General.TreatStructAsClass",
        "readability-identifier-naming.HungarianNotation.PrimitiveType._Bool",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.bool",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.char",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.char16_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.char32_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.char8_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.double",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.float",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.int16_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.int32_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.int64_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.int8_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.long-double",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.long-long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.long-long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.ptrdiff_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.short",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.short-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-long-long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-long-long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-short",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.signed-short-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.size_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.uint16_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.uint32_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.uint64_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.uint8_t",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-char",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-long-long",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-long-long-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-short",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.unsigned-short-int",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.void",
        "readability-identifier-naming.HungarianNotation.PrimitiveType.wchar_t",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.BOOL",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.BOOLEAN",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.BYTE",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.CHAR",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.DWORD",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.DWORD32",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.DWORD64",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.HANDLE",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.INT",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.INT16",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.INT32",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.INT64",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.INT8",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.LONG",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.PVOID",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.SHORT",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UCHAR",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UINT",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UINT16",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UINT32",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UINT64",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.UINT8",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.ULONG",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.ULONG32",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.ULONG64",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.ULONGLONG",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.USHORT",
        "readability-identifier-naming.HungarianNotation.UserDefinedType.WORD",
        "readability-identifier-naming.IgnoreFailedSplit",
        "readability-identifier-naming.IgnoreMainLikeFunctions",
        "readability-identifier-naming.InlineNamespaceCase",
        "readability-identifier-naming.InlineNamespaceHungarianPrefix",
        "readability-identifier-naming.InlineNamespaceIgnoredRegexp",
        "readability-identifier-naming.InlineNamespacePrefix",
        "readability-identifier-naming.InlineNamespaceSuffix",
        "readability-identifier-naming.LocalConstantCase",
        "readability-identifier-naming.LocalConstantHungarianPrefix",
        "readability-identifier-naming.LocalConstantIgnoredRegexp",
        "readability-identifier-naming.LocalConstantPointerCase",
        "readability-identifier-naming.LocalConstantPointerHungarianPrefix",
        "readability-identifier-naming.LocalConstantPointerIgnoredRegexp",
        "readability-identifier-naming.LocalConstantPointerPrefix",
        "readability-identifier-naming.LocalConstantPointerSuffix",
        "readability-identifier-naming.LocalConstantPrefix",
        "readability-identifier-naming.LocalConstantSuffix",
        "readability-identifier-naming.LocalPointerCase",
        "readability-identifier-naming.LocalPointerHungarianPrefix",
        "readability-identifier-naming.LocalPointerIgnoredRegexp",
        "readability-identifier-naming.LocalPointerPrefix",
        "readability-identifier-naming.LocalPointerSuffix",
        "readability-identifier-naming.LocalVariableCase",
        "readability-identifier-naming.LocalVariableHungarianPrefix",
        "readability-identifier-naming.LocalVariableIgnoredRegexp",
        "readability-identifier-naming.LocalVariablePrefix",
        "readability-identifier-naming.LocalVariableSuffix",
        "readability-identifier-naming.MacroDefinitionCase",
        "readability-identifier-naming.MacroDefinitionHungarianPrefix",
        "readability-identifier-naming.MacroDefinitionIgnoredRegexp",
        "readability-identifier-naming.MacroDefinitionPrefix",
        "readability-identifier-naming.MacroDefinitionSuffix",
        "readability-identifier-naming.MemberCase",
        "readability-identifier-naming.MemberHungarianPrefix",
        "readability-identifier-naming.MemberIgnoredRegexp",
        "readability-identifier-naming.MemberPrefix",
        "readability-identifier-naming.MemberSuffix",
        "readability-identifier-naming.MethodCase",
        "readability-identifier-naming.MethodHungarianPrefix",
        "readability-identifier-naming.MethodIgnoredRegexp",
        "readability-identifier-naming.MethodPrefix",
        "readability-identifier-naming.MethodSuffix",
        "readability-identifier-naming.NamespaceCase",
        "readability-identifier-naming.NamespaceHungarianPrefix",
        "readability-identifier-naming.NamespaceIgnoredRegexp",
        "readability-identifier-naming.NamespacePrefix",
        "readability-identifier-naming.NamespaceSuffix",
        "readability-identifier-naming.ObjcIvarCase",
        "readability-identifier-naming.ObjcIvarHungarianPrefix",
        "readability-identifier-naming.ObjcIvarIgnoredRegexp",
        "readability-identifier-naming.ObjcIvarPrefix",
        "readability-identifier-naming.ObjcIvarSuffix",
        "readability-identifier-naming.ParameterCase",
        "readability-identifier-naming.ParameterHungarianPrefix",
        "readability-identifier-naming.ParameterIgnoredRegexp",
        "readability-identifier-naming.ParameterPackCase",
        "readability-identifier-naming.ParameterPackHungarianPrefix",
        "readability-identifier-naming.ParameterPackIgnoredRegexp",
        "readability-identifier-naming.ParameterPackPrefix",
        "readability-identifier-naming.ParameterPackSuffix",
        "readability-identifier-naming.ParameterPrefix",
        "readability-identifier-naming.ParameterSuffix",
        "readability-identifier-naming.PointerParameterCase",
        "readability-identifier-naming.PointerParameterHungarianPrefix",
        "readability-identifier-naming.PointerParameterIgnoredRegexp",
        "readability-identifier-naming.PointerParameterPrefix",
        "readability-identifier-naming.PointerParameterSuffix",
        "readability-identifier-naming.PrivateMemberCase",
        "readability-identifier-naming.PrivateMemberHungarianPrefix",
        "readability-identifier-naming.PrivateMemberIgnoredRegexp",
        "readability-identifier-naming.PrivateMemberPrefix",
        "readability-identifier-naming.PrivateMemberSuffix",
        "readability-identifier-naming.PrivateMethodCase",
        "readability-identifier-naming.PrivateMethodHungarianPrefix",
        "readability-identifier-naming.PrivateMethodIgnoredRegexp",
        "readability-identifier-naming.PrivateMethodPrefix",
        "readability-identifier-naming.PrivateMethodSuffix",
        "readability-identifier-naming.ProtectedMemberCase",
        "readability-identifier-naming.ProtectedMemberHungarianPrefix",
        "readability-identifier-naming.ProtectedMemberIgnoredRegexp",
        "readability-identifier-naming.ProtectedMemberPrefix",
        "readability-identifier-naming.ProtectedMemberSuffix",
        "readability-identifier-naming.ProtectedMethodCase",
        "readability-identifier-naming.ProtectedMethodHungarianPrefix",
        "readability-identifier-naming.ProtectedMethodIgnoredRegexp",
        "readability-identifier-naming.ProtectedMethodPrefix",
        "readability-identifier-naming.ProtectedMethodSuffix",
        "readability-identifier-naming.PublicMemberCase",
        "readability-identifier-naming.PublicMemberHungarianPrefix",
        "readability-identifier-naming.PublicMemberIgnoredRegexp",
        "readability-identifier-naming.PublicMemberPrefix",
        "readability-identifier-naming.PublicMemberSuffix",
        "readability-identifier-naming.PublicMethodCase",
        "readability-identifier-naming.PublicMethodHungarianPrefix",
        "readability-identifier-naming.PublicMethodIgnoredRegexp",
        "readability-identifier-naming.PublicMethodPrefix",
        "readability-identifier-naming.PublicMethodSuffix",
        "readability-identifier-naming.ScopedEnumConstantCase",
        "readability-identifier-naming.ScopedEnumConstantHungarianPrefix",
        "readability-identifier-naming.ScopedEnumConstantIgnoredRegexp",
        "readability-identifier-naming.ScopedEnumConstantPrefix",
        "readability-identifier-naming.ScopedEnumConstantSuffix",
        "readability-identifier-naming.StaticConstantCase",
        "readability-identifier-naming.StaticConstantHungarianPrefix",
        "readability-identifier-naming.StaticConstantIgnoredRegexp",
        "readability-identifier-naming.StaticConstantPrefix",
        "readability-identifier-naming.StaticConstantSuffix",
        "readability-identifier-naming.StaticVariableCase",
        "readability-identifier-naming.StaticVariableHungarianPrefix",
        "readability-identifier-naming.StaticVariableIgnoredRegexp",
        "readability-identifier-naming.StaticVariablePrefix",
        "readability-identifier-naming.StaticVariableSuffix",
        "readability-identifier-naming.StructCase",
        "readability-identifier-naming.StructHungarianPrefix",
        "readability-identifier-naming.StructIgnoredRegexp",
        "readability-identifier-naming.StructPrefix",
        "readability-identifier-naming.StructSuffix",
        "readability-identifier-naming.TemplateParameterCase",
        "readability-identifier-naming.TemplateParameterHungarianPrefix",
        "readability-identifier-naming.TemplateParameterIgnoredRegexp",
        "readability-identifier-naming.TemplateParameterPrefix",
        "readability-identifier-naming.TemplateParameterSuffix",
        "readability-identifier-naming.TemplateTemplateParameterCase",
        "readability-identifier-naming.TemplateTemplateParameterHungarianPrefix",
        "readability-identifier-naming.TemplateTemplateParameterIgnoredRegexp",
        "readability-identifier-naming.TemplateTemplateParameterPrefix",
        "readability-identifier-naming.TemplateTemplateParameterSuffix",
        "readability-identifier-naming.TypeAliasCase",
        "readability-identifier-naming.TypeAliasHungarianPrefix",
        "readability-identifier-naming.TypeAliasIgnoredRegexp",
        "readability-identifier-naming.TypeAliasPrefix",
        "readability-identifier-naming.TypeAliasSuffix",
        "readability-identifier-naming.TypeTemplateParameterCase",
        "readability-identifier-naming.TypeTemplateParameterHungarianPrefix",
        "readability-identifier-naming.TypeTemplateParameterIgnoredRegexp",
        "readability-identifier-naming.TypeTemplateParameterPrefix",
        "readability-identifier-naming.TypeTemplateParameterSuffix",
        "readability-identifier-naming.TypedefCase",
        "readability-identifier-naming.TypedefHungarianPrefix",
        "readability-identifier-naming.TypedefIgnoredRegexp",
        "readability-identifier-naming.TypedefPrefix",
        "readability-identifier-naming.TypedefSuffix",
        "readability-identifier-naming.UnionCase",
        "readability-identifier-naming.UnionHungarianPrefix",
        "readability-identifier-naming.UnionIgnoredRegexp",
        "readability-identifier-naming.UnionPrefix",
        "readability-identifier-naming.UnionSuffix",
        "readability-identifier-naming.ValueTemplateParameterCase",
        "readability-identifier-naming.ValueTemplateParameterHungarianPrefix",
        "readability-identifier-naming.ValueTemplateParameterIgnoredRegexp",
        "readability-identifier-naming.ValueTemplateParameterPrefix",
        "readability-identifier-naming.ValueTemplateParameterSuffix",
        "readability-identifier-naming.VariableCase",
        "readability-identifier-naming.VariableHungarianPrefix",
        "readability-identifier-naming.VariableIgnoredRegexp",
        "readability-identifier-naming.VariablePrefix",
        "readability-identifier-naming.VariableSuffix",
        "readability-identifier-naming.VirtualMethodCase",
        "readability-identifier-naming.VirtualMethodHungarianPrefix",
        "readability-identifier-naming.VirtualMethodIgnoredRegexp",
        "readability-identifier-naming.VirtualMethodPrefix",
        "readability-identifier-naming.VirtualMethodSuffix",
        "readability-implicit-bool-conversion.AllowIntegerConditions",
        "readability-implicit-bool-conversion.AllowPointerConditions",
        "readability-inconsistent-declaration-parameter-name.IgnoreMacros",
        "readability-inconsistent-declaration-parameter-name.Strict",
        "readability-magic-numbers.IgnoreAllFloatingPointValues",
        "readability-magic-numbers.IgnoreBitFieldsWidths",
        "readability-magic-numbers.IgnorePowersOf2IntegerValues",
        "readability-magic-numbers.IgnoreTypeAliases",
        "readability-magic-numbers.IgnoreUserDefinedLiterals",
        "readability-magic-numbers.IgnoredFloatingPointValues",
        "readability-magic-numbers.IgnoredIntegerValues",
        "readability-operators-representation.BinaryOperators",
        "readability-operators-representation.OverloadedOperators",
        "readability-qualified-auto.AddConstToQualified",
        "readability-redundant-access-specifiers.CheckFirstDeclaration",
        "readability-redundant-casting.IgnoreMacros",
        "readability-redundant-casting.IgnoreTypeAliases",
        "readability-redundant-declaration.IgnoreMacros",
        "readability-redundant-inline-specifier.StrictMode",
        "readability-redundant-member-init.IgnoreBaseInCopyConstructors",
        "readability-redundant-smartptr-get.IgnoreMacros",
        "readability-redundant-string-cstr.StringParameterFunctions",
        "readability-redundant-string-init.StringNames",
        "readability-simplify-boolean-expr.ChainedConditionalAssignment",
        "readability-simplify-boolean-expr.ChainedConditionalReturn",
        "readability-simplify-boolean-expr.IgnoreMacros",
        "readability-simplify-boolean-expr.SimplifyDeMorgan",
        "readability-simplify-boolean-expr.SimplifyDeMorganRelaxed",
        "readability-simplify-subscript-expr.Types",
        "readability-static-accessed-through-instance.NameSpecifierNestingThreshold",
        "readability-suspicious-call-argument.Abbreviation",
        "readability-suspicious-call-argument.AbbreviationDissimilarBelow",
        "readability-suspicious-call-argument.AbbreviationSimilarAbove",
        "readability-suspicious-call-argument.Abbreviations",
        "readability-suspicious-call-argument.Dice",
        "readability-suspicious-call-argument.DiceDissimilarBelow",
        "readability-suspicious-call-argument.DiceSimilarAbove",
        "readability-suspicious-call-argument.Equality",
        "readability-suspicious-call-argument.EqualityDissimilarBelow",
        "readability-suspicious-call-argument.EqualitySimilarAbove",
        "readability-suspicious-call-argument.JaroWinkler",
        "readability-suspicious-call-argument.JaroWinklerDissimilarBelow",
        "readability-suspicious-call-argument.JaroWinklerSimilarAbove",
        "readability-suspicious-call-argument.Levenshtein",
        "readability-suspicious-call-argument.LevenshteinDissimilarBelow",
        "readability-suspicious-call-argument.LevenshteinSimilarAbove",
        "readability-suspicious-call-argument.MinimumIdentifierNameLength",
        "readability-suspicious-call-argument.Prefix",
        "readability-suspicious-call-argument.PrefixDissimilarBelow",
        "readability-suspicious-call-argument.PrefixSimilarAbove",
        "readability-suspicious-call-argument.Substring",
        "readability-suspicious-call-argument.SubstringDissimilarBelow",
        "readability-suspicious-call-argument.SubstringSimilarAbove",
        "readability-suspicious-call-argument.Suffix",
        "readability-suspicious-call-argument.SuffixDissimilarBelow",
        "readability-suspicious-call-argument.SuffixSimilarAbove",
        "readability-uniqueptr-delete-release.PreferResetCall",
        "readability-uppercase-literal-suffix.IgnoreMacros",
        "readability-uppercase-literal-suffix.NewSuffixes",
        "zircon-temporary-objects.Names"
      ]
    }
  },
  "properties": {
    "Checks": {
      "description": "Comma-separated list of globs with optional '-' prefix. Globs are processed in order of appearance in the list. Globs without '-' prefix add checks with matching names to the set, globs with the '-' prefix remove checks with matching names from the set of enabled checks.",
      "oneOf": [
        { "type": "string" },
        {
          "type": "array",
          "items": {
            "type": "string",
            "oneOf": [
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*abseil-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Abseil library."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*altera-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to OpenCL programming for FPGAs."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*android-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Android."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*boost-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Boost library."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*bugprone-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that target bug-prone code constructs."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*cert-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to CERT Secure Coding Guidelines."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*clang-analyzer-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Clang Static Analyzer checks."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*concurrency-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to concurrent programming (including threads, fibers, coroutines, etc.)."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*cppcoreguidelines-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to C++ Core Guidelines."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*darwin-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Darwin coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*fuchsia-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Fuchsia coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*google-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Google coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*hicpp-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to High Integrity C++ Coding Standard."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*linuxkernel-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to the Linux Kernel coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*llvm-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to the LLVM coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*llvmlibc-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to the LLVM-libc coding standards."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*misc-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that we didn't have a better category for."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*modernize-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that advocate usage of modern (currently \"modern\" means \"C++11\") language constructs."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*mpi-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to MPI (Message Passing Interface)."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*objc-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Objective-C coding conventions."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*openmp-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to OpenMP API."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*performance-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that target performance-related issues."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*portability-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that target portability-related issues that don't relate to any particular coding style."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*readability-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks that target readability-related issues that don't relate to any particular coding style."
              },
              {
                "pattern": "^[ \\t\\n\\v\\f\\r]*-?[ \\t\\n\\v\\f\\r]*zircon-\\*[ \\t\\n\\v\\f\\r]*$",
                "title": "Checks related to Zircon kernel coding conventions."
              }
            ]
          }
        }
      ],
      "default": "clang-diagnostic-*,clang-analyzer-*"
    },
    "WarningsAsErrors": {
      "description": "Upgrades warnings to errors. Comma-separated list of globs with optional '-' prefix. Globs are processed in order of appearance in the list. Globs without '-' prefix add checks with matching names to the set, globs with the '-' prefix remove checks with matching names from the set of upgraded checks.",
      "type": "string"
    },
    "HeaderFileExtensions": {
      "$ref": "#/definitions/fileExtensions",
      "description": "File extensions to consider to determine if a given diagnostic is located in a header file.",
      "default": ["", "h", "hh", "hpp", "hxx"]
    },
    "ImplementationFileExtensions": {
      "$ref": "#/definitions/fileExtensions",
      "description": "File extensions to consider to determine if a given diagnostic is located in an implementation file.",
      "default": ["c", "cc", "cpp", "cxx"]
    },
    "HeaderFilterRegex": {
      "description": "Regular expression matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed.",
      "type": "string",
      "format": "regex"
    },
    "FormatStyle": {
      "description": "Style for formatting code around applied fixes.",
      "type": "string",
      "oneOf": [
        { "const": "none", "title": "Turns off formatting." },
        {
          "const": "file",
          "title": "Uses .clang-format file in the closest parent directory."
        },
        {
          "pattern": "^file:",
          "title": "Uses explicitly specified configuration file."
        },
        {
          "pattern": "^\\{",
          "contentMediaType": "application/yaml",
          "title": "Uses inline formatting style."
        },
        {
          "$comment": "Actually case-insensitive",
          "enum": [
            "llvm",
            "LLVM",
            "chromium",
            "Google",
            "mozilla",
            "Chromium",
            "google",
            "Mozilla",
            "webkit",
            "WebKit",
            "gnu",
            "GNU",
            "microsoft",
            "Microsoft",
            "clang-format"
          ],
          "title": "Uses a preset."
        },
        {
          "$comment": "Actually case-insensitive",
          "enum": ["inheritparentconfig", "InheritParentConfig"],
          "title": "Uses .clang-format file in a parent directory."
        }
      ],
      "default": "none"
    },
    "User": {
      "type": "string",
      "description": "Specifies the name or e-mail of the user running clang-tidy. This option is used, for example, to place the correct user name in TODO() comments in the relevant check.",
      "examples": ["A.U. Thor", "Alice (alice@bob.com)"]
    },
    "CheckOptions": {
      "oneOf": [
        {
          "type": "object",
          "propertyNames": { "$ref": "#/definitions/options" }
        },
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": { "$ref": "#/definitions/options" },
              "value": { "$comment": "TODO" }
            },
            "required": ["key", "value"]
          }
        }
      ]
    },
    "ExtraArgs": {
      "description": "Additional argument to append to the compiler command line.",
      "type": "array",
      "items": { "type": "string" }
    },
    "ExtraArgsBefore": {
      "description": "Additional argument to prepend to the compiler command line.",
      "type": "array",
      "items": { "type": "string" }
    },
    "InheritParentConfig": {
      "description": "If this option is true in a config file, the configuration file in the parent directory (if any exists) will be taken and the current config file will be applied on top of the parent one.",
      "type": "boolean",
      "default": false
    },
    "UseColor": {
      "description": "Use colors in diagnostics. If not set, colors will be used if the terminal connected to standard output supports colors.",
      "type": "boolean"
    },
    "SystemHeaders": {
      "description": "Display the errors from system headers.",
      "type": "boolean",
      "default": false
    }
  },
  "type": "object"
}
